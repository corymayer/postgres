 EXPLAIN select o_year, sum(case when nation = 'KENYA' then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = 'AFRICA' and s_nationkey = n2.n_nationkey and o_orderdate between date '1995-01-01' and date '1996-12-31' and p_type = 'ECONOMY POLISHED STEEL' ) as all_nations group by o_year order by o_year;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=77272.93..77605.18 rows=2406 width=16)
   Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   ->  Gather Merge  (cost=77272.93..77547.72 rows=2048 width=24)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=76272.90..76311.30 rows=1024 width=24)
               Group Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
               ->  Sort  (cost=76272.90..76275.46 rows=1024 width=42)
                     Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
                     ->  Hash Join  (cost=5.79..76221.70 rows=1024 width=42)
                           Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
                           ->  Nested Loop  (cost=4.22..76202.46 rows=1024 width=16)
                                 ->  Hash Join  (cost=3.94..75892.53 rows=1024 width=16)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Nested Loop  (cost=1.28..75860.43 rows=5119 width=20)
                                             ->  Nested Loop  (cost=0.86..73445.53 rows=5119 width=20)
                                                   ->  Nested Loop  (cost=0.43..65610.32 rows=16684 width=16)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..5105.67 rows=555 width=4)
                                                               Filter: ((p_type)::text = 'ECONOMY POLISHED STEEL'::text)
                                                         ->  Index Scan using i_l_partkey on lineitem  (cost=0.43..108.71 rows=31 width=20)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Index Scan using orders_pkey on orders  (cost=0.43..0.47 rows=1 width=12)
                                                         Index Cond: (o_orderkey = lineitem.l_orderkey)
                                                         Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Index Scan using customer_pkey on customer  (cost=0.42..0.47 rows=1 width=8)
                                                   Index Cond: (c_custkey = orders.o_custkey)
                                       ->  Hash  (cost=2.60..2.60 rows=5 width=4)
                                             ->  Hash Join  (cost=1.07..2.60 rows=5 width=4)
                                                   Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                         ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                               Filter: (r_name = 'AFRICA'::bpchar)
                                 ->  Index Scan using supplier_pkey on supplier  (cost=0.29..0.30 rows=1 width=8)
                                       Index Cond: (s_suppkey = lineitem.l_suppkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(36 rows)

