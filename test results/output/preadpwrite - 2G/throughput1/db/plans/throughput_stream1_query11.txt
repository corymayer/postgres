 EXPLAIN select ps_partkey, sum(ps_supplycost * ps_availqty) as value from partsupp, supplier, nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'FRANCE' group by ps_partkey having sum(ps_supplycost * ps_availqty) > ( select sum(ps_supplycost * ps_availqty) * 0.0001000000 from partsupp, supplier, nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'FRANCE' ) order by value desc;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort  (cost=26708.35..26761.67 rows=21328 width=12)
   Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::double precision))) DESC
   InitPlan 1 (returns $2)
     ->  Aggregate  (cost=9233.83..9233.84 rows=1 width=8)
           ->  Nested Loop  (cost=18.91..8753.96 rows=63983 width=8)
                 ->  Nested Loop  (cost=18.49..481.96 rows=800 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'FRANCE'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=18.49..472.65 rows=800 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on i_s_nationkey  (cost=0.00..18.29 rows=800 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using i_ps_suppkey on partsupp partsupp_1  (cost=0.43..9.54 rows=80 width=12)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  GroupAggregate  (cost=13861.53..15940.97 rows=21328 width=12)
         Group Key: partsupp.ps_partkey
         Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::double precision)) > $2)
         ->  Sort  (cost=13861.53..14021.48 rows=63983 width=12)
               Sort Key: partsupp.ps_partkey
               ->  Nested Loop  (cost=18.91..8753.96 rows=63983 width=12)
                     ->  Nested Loop  (cost=18.49..481.96 rows=800 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'FRANCE'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=18.49..472.65 rows=800 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on i_s_nationkey  (cost=0.00..18.29 rows=800 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using i_ps_suppkey on partsupp  (cost=0.43..9.54 rows=80 width=16)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(29 rows)

