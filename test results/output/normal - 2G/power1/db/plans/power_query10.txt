 EXPLAIN select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate >= date '1994-05-01' and o_orderdate < date '1994-05-01' + interval '3 months' and l_returnflag = 'R' and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc LIMIT 20;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=352291.64..352291.69 rows=20 width=176)
   ->  Sort  (cost=352291.64..352560.34 rows=107482 width=176)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::double precision - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=336227.03..349431.58 rows=107482 width=176)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=336227.03..347685.00 rows=89568 width=176)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=335227.01..336346.61 rows=44784 width=176)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=335227.01..335338.97 rows=44784 width=176)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=63761.70..327938.29 rows=44784 width=176)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=63760.14..327387.22 rows=44784 width=154)
                                             ->  Merge Join  (cost=63759.70..78186.88 rows=45533 width=150)
                                                   Merge Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Index Scan using customer_pkey on customer  (cost=0.42..13115.42 rows=125000 width=146)
                                                   ->  Sort  (cost=63758.10..64031.29 rows=109279 width=8)
                                                         Sort Key: orders.o_custkey
                                                         ->  Bitmap Heap Scan on orders  (cost=2320.54..54612.72 rows=109279 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1994-05-01'::date) AND (o_orderdate < '1994-08-01 00:00:00'::timestamp without time zone))
                                                               ->  Bitmap Index Scan on i_o_orderdate  (cost=0.00..2293.22 rows=109279 width=0)
                                                                     Index Cond: ((o_orderdate >= '1994-05-01'::date) AND (o_orderdate < '1994-08-01 00:00:00'::timestamp without time zone))
                                             ->  Index Scan using i_l_orderkey on lineitem  (cost=0.43..5.40 rows=7 width=12)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(28 rows)

