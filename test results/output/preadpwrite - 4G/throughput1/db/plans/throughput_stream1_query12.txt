 EXPLAIN select l_shipmode, sum(case when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1 else 0 end) as high_line_count, sum(case when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1 else 0 end) as low_line_count from orders, lineitem where o_orderkey = l_orderkey and l_shipmode in ('RAIL', 'REG AIR') and l_commitdate < l_receiptdate and l_shipdate < l_commitdate and l_receiptdate >= date '1993-01-01' and l_receiptdate < date '1993-01-01' + interval '1 year' group by l_shipmode order by l_shipmode;
                                                                                                                                    QUERY PLAN                                                                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=830794.41..831748.48 rows=7 width=27)
   Group Key: lineitem.l_shipmode
   ->  Gather Merge  (cost=830794.41..831748.30 rows=14 width=27)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=829794.39..830746.66 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Sort  (cost=829794.39..829913.42 rows=47610 width=27)
                     Sort Key: lineitem.l_shipmode
                     ->  Nested Loop  (cost=0.43..826095.34 rows=47610 width=27)
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..651370.84 rows=47610 width=15)
                                 Filter: ((l_shipmode = ANY ('{RAIL,"REG AIR"}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '1993-01-01'::date) AND (l_receiptdate < '1994-01-01 00:00:00'::timestamp without time zone))
                           ->  Index Scan using orders_pkey on orders  (cost=0.43..3.67 rows=1 width=20)
                                 Index Cond: (o_orderkey = lineitem.l_orderkey)
(13 rows)

