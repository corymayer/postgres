 EXPLAIN select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate >= date '1993-12-01' and o_orderdate < date '1993-12-01' + interval '3 months' and l_returnflag = 'R' and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc LIMIT 20;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=181796.91..181796.96 rows=20 width=176)
   ->  Sort  (cost=181796.91..181948.35 rows=60575 width=176)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::double precision - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=172743.04..180185.04 rows=60575 width=176)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=172743.04..179200.69 rows=50480 width=176)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=171743.02..172374.02 rows=25240 width=176)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=171743.02..171806.12 rows=25240 width=176)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=32547.36..167738.04 rows=25240 width=176)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Nested Loop  (cost=32545.80..167426.79 rows=25240 width=154)
                                             ->  Merge Join  (cost=32545.36..39835.00 rows=25860 width=150)
                                                   Merge Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Index Scan using customer_pkey on customer  (cost=0.42..6565.42 rows=62500 width=146)
                                                   ->  Sort  (cost=32544.41..32699.57 rows=62065 width=8)
                                                         Sort Key: orders.o_custkey
                                                         ->  Bitmap Heap Scan on orders  (cost=1320.59..27603.57 rows=62065 width=8)
                                                               Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01 00:00:00'::timestamp without time zone))
                                                               ->  Bitmap Index Scan on i_o_orderdate  (cost=0.00..1305.08 rows=62065 width=0)
                                                                     Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01 00:00:00'::timestamp without time zone))
                                             ->  Index Scan using i_l_orderkey on lineitem  (cost=0.43..4.89 rows=4 width=12)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                                   Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(28 rows)

