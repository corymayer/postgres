 EXPLAIN select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 27 and p_type like '%NICKEL' and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'EUROPE' and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'EUROPE' ) order by s_acctbal desc, n_name, s_name, p_partkey LIMIT 100;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=478606.69..478606.70 rows=1 width=191)
   ->  Sort  (cost=478606.69..478606.70 rows=1 width=191)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=254258.54..478606.68 rows=1 width=191)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Gather Merge  (cost=1000.45..35431.70 rows=3407 width=30)
                     Workers Planned: 2
                     ->  Parallel Index Scan using part_pkey on part  (cost=0.42..34038.43 rows=1420 width=30)
                           Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 27))
               ->  Materialize  (cost=253257.42..256409.42 rows=630400 width=169)
                     ->  Sort  (cost=253257.42..254833.42 rows=630400 width=169)
                           Sort Key: partsupp.ps_partkey
                           ->  Nested Loop  (cost=1.99..84794.28 rows=630400 width=169)
                                 ->  Nested Loop  (cost=1.56..2266.43 rows=8000 width=165)
                                       Join Filter: (nation.n_regionkey = region.r_regionkey)
                                       ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                             Filter: (r_name = 'EUROPE'::bpchar)
                                       ->  Hash Join  (cost=1.56..1765.36 rows=40000 width=169)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..1273.00 rows=40000 width=143)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=34)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                 ->  Index Scan using i_ps_suppkey on partsupp  (cost=0.43..9.53 rows=79 width=12)
                                       Index Cond: (ps_suppkey = supplier.s_suppkey)
               SubPlan 1
                 ->  Aggregate  (cost=68.95..68.96 rows=1 width=4)
                       ->  Nested Loop  (cost=0.86..68.94 rows=1 width=4)
                             Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                             ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                   Filter: (r_name = 'EUROPE'::bpchar)
                             ->  Nested Loop  (cost=0.86..67.79 rows=7 width=8)
                                   ->  Nested Loop  (cost=0.72..66.71 rows=7 width=8)
                                         ->  Index Scan using i_ps_partkey on partsupp partsupp_1  (cost=0.43..8.55 rows=7 width=8)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using supplier_pkey on supplier supplier_1  (cost=0.29..8.31 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                   ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                         Index Cond: (n_nationkey = supplier_1.s_nationkey)
(39 rows)

